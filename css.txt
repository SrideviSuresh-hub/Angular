
.p-datatable {
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.p-datatable table {
  width: 100%;
  border-collapse: collapse;
}

.p-datatable th {
  background-color: #f4f4f4;
  text-align: left;
  padding: 12px;
  font-weight: bold;
  border-bottom: 2px solid #ddd;
}

.p-datatable td {
  padding: 12px;
  border-bottom: 1px solid #ddd;
}

.p-datatable tbody tr:hover {
  background-color: #f9f9f9;
}

.p-button {
  border-radius: 8px !important;
  padding: 6px 12px !important;
}


.p-dialog .p-dialog-header {
  background-color: #673ab7;
  color: #fff;
  font-size: 1.2rem;
  padding: 16px;
}

.p-dialog .p-dialog-content {
  padding: 20px;
}

.p-dialog .p-dialog-footer {
  padding: 16px;
  text-align: right;
}


.p-tag {
  cursor: pointer;
  font-weight: bold;
}

.spinner-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100px;
}

export class OrderService {
  private generatedOrderIds = new Set<string>(); // Store unique IDs

  generateUniqueOrderId(): string {
    let orderId: string;

    do {
      const uniqueNum = Math.floor(100000 + Math.random() * 900000); // 6-digit random number
      orderId = `ORD${uniqueNum}`; // Example: ORD123456
    } while (this.generatedOrderIds.has(orderId));

    this.generatedOrderIds.add(orderId);
    return orderId;
  }
}

// Example Usage
const orderService = new OrderService();
console.log(orderService.generateUniqueOrderId()); // ORD123456
console.log(orderService.generateUniqueOrderId()); // ORD789012
