Great! Here's a **starter setup** to help you kick off the Reminder Application ðŸš€

---

 Step 1: `db.json` (for `json-server`)

```json
{
  "users": [
    {
      "id": 1,
      "username": "admin1",
      "password": "admin123",
      "role": "admin",
      "name": "Admin User"
    },
    {
      "id": 2,
      "username": "itouser1",
      "password": "user123",
      "role": "itouser",
      "name": "ITO User One"
    }
  ],
  "reminders": [
    {
      "id": 1,
      "title": "Project Deadline",
      "description": "Submit by 5 PM",
      "date": "2025-04-15",
      "userId": 2
    }
  ]
}
```

Run with:
```bash
json-server --watch db.json --port 3000
```

---

 Step 2: `environment.ts`

```ts
export const environment = {
  production: false,
  apiUrl: 'http://localhost:3000'
};
```

---

 Step 3: App Routing Skeleton (`app-routing.module.ts`)

```ts
const routes: Routes = [
  { path: '', redirectTo: 'login', pathMatch: 'full' },
  { path: 'login', component: LoginComponent },
  {
    path: 'home',
    component: HomeComponent,
    canActivate: [AuthGuard],
    children: [
      { path: 'dashboard', component: DashboardComponent },
      { path: 'users', component: UsersComponent, canActivate: [AdminGuard] },
      { path: 'reminders', component: RemindersComponent }
    ]
  },
  { path: '**', redirectTo: 'login' }
];
```

---

 Step 4: AuthGuard Example

```ts
@Injectable({ providedIn: 'root' })
export class AuthGuard implements CanActivate {
  constructor(private router: Router) {}

  canActivate(): boolean {
    const user = localStorage.getItem('loggedInUser');
    if (user) return true;

    this.router.navigate(['/login']);
    return false;
  }
}
```
import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { AuthService } from './auth.service';  // Assuming you have an AuthService to manage logged-in users

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {

  constructor(private authService: AuthService, private router: Router) {}

  canActivate(
    next: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
    const user = this.authService.getCurrentUser();
    if (user && user.isAdmin) {
      return true; // Allow access to the route
    } else {
      this.router.navigate(['/login']);  // Redirect if not admin
      return false;
    }
  }
}
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable } from 'rxjs';
import { inject } from '@angular/core';
import { Router } from '@angular/router';
import { User } from './user.model';  // Assuming you have a User model

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private curUserSubject: BehaviorSubject<User | null>;
  public curUser: Observable<User | null>;

  private url = 'http://localhost:3000/users';  // URL of your API (e.g., json-server)

  // Inject HttpClient and Router via the inject function
  private http = inject(HttpClient);
  private router = inject(Router);

  constructor() {
    // Get the user from local storage or start with null
    const user = JSON.parse(localStorage.getItem('curUser') || 'null');
    this.curUserSubject = new BehaviorSubject<User | null>(user);
    this.curUser = this.curUserSubject.asObservable();
  }

  // Getter for the current user
  public get currentUserValue(): User | null {
    return this.curUserSubject.value;
  }

   login(username: string, password: string): Observable<User> {
    // This is a mock example. Replace with actual API logic.
    return this.getUserByUsername(username).pipe(
      map(user => {
        if (user && user.password === password) {  // Check password
          localStorage.setItem('curUser', JSON.stringify(user));
          this.curUserSubject.next(user);  // Update the BehaviorSubject
          return user;
        } else {
          throw new Error('Invalid credentials');
        }
      })
    );
  }
 
  // Logout method
  logout(): void {
    // Remove the user from localStorage
    localStorage.removeItem('curUser');
    this.curUserSubject.next(null);  // Clear the BehaviorSubject
    this.router.navigate(['/login']);  // Navigate to login page
  }

  // Update user details (for example, after profile editing)
  updateUser(user: User): Observable<User> {
    return this.http.put<User>(`${this.url}/${user.id}`, user).pipe(
      tap(updatedUser => {
        // Update local storage and BehaviorSubject with the new user data
        localStorage.setItem('curUser', JSON.stringify(updatedUser));
        this.curUserSubject.next(updatedUser);
      })
    );
  }

  // Get a list of all users (Admin only)
  getAllUsers(): Observable<User[]> {
    return this.http.get<User[]>(this.url);
  }

  // Get a single user by ID (Admin only)
  getUserById(id: number): Observable<User> {
    return this.http.get<User>(`${this.url}/${id}`);
  }

  // Delete a user (Admin only)
  deleteUser(id: number): Observable<void> {
    return this.http.delete<void>(`${this.url}/${id}`);
  }
}


 Step 5: Sample `UserService`

```ts
@Injectable({ providedIn: 'root' })
export class UserService {
  private apiUrl = environment.apiUrl + '/users';

  constructor(private http: HttpClient) {}

  login(username: string, password: string): Observable<any> {
    return this.http.get<any[]>(`${this.apiUrl}?username=${username}&password=${password}`);
  }

  getUsers(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl);
  }

  addUser(user: any): Observable<any> {
    return this.http.post(this.apiUrl, user);
  }

  updateUser(id: number, user: any): Observable<any> {
    return this.http.put(`${this.apiUrl}/${id}`, user);
  }

  deleteUser(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`);
  }
}
```

---

 Bonus: Auto Logout (Inside `app.component.ts` or `auth.service.ts`)

```ts
startAutoLogoutTimer() {
  this.timeout = setTimeout(() => {
    this.logout(); // Clear localStorage and navigate to login
    alert('Logged out due to inactivity');
  }, 10 * 60 * 1000); // 10 minutes
}
```

You can reset the timer on `mousemove`, `keydown`, etc.

---

Let me know if you want:
- `LoginComponent` template + logic
- `HomeComponent` dashboard with charts (line + pie)
- `ReminderComponent` (CRUD)
- `UserComponent` (Admin only)
- Theme toggle setup

Want to generate any of these next?

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './login/login.component';

export const routes1: Routes = [
  { path: '', redirectTo: 'login', pathMatch: 'full' },
  { path: 'login', component: LoginComponent },
  {
    path: 'portal',
    loadChildren: () =>
      import('./portal/portal.module').then((modObj) => modObj.PortalModule)
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes1)],
  exports: [RouterModule]
})
export class AppRoutingModule {}
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { UsersComponent } from './users/users.component';
import { ReminderComponent } from './reminder/reminder.component';
import { HomeComponent } from './home/home.component';
import { HeaderComponent } from './header/header.component';
import { PortalComponent } from './portal.component';

const routes2: Routes = [
  {
    path: '',
    component: PortalComponent,
    children: [
      { path: 'users', component: UsersComponent },
      { path: 'reminder', component: ReminderComponent },
      { path: 'home', component: HomeComponent },
      { path: 'header', component: HeaderComponent },
      { path: '', redirectTo: 'home', pathMatch: 'full' } // optional default
    ]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes2)],
  exports: [RouterModule]
})
export class PortalRoutingModule {}
You're on the right track! Let's polish everything by addressing **syntax errors, structure issues, and best practices**. Here's the cleaned-up and corrected version of each part:

---

  `header.component.ts`

```ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css'] //  Fix: use `styleUrls` (array)
})
export class HeaderComponent { }
```

---

  `header.component.html`

```html
<div class="card">
  <p-menubar>
    <ng-template pTemplate="start">
      <img src="assets/images/logo.png" alt="Logo" height="40" />
    </ng-template>
    <ng-template pTemplate="end">
      <div class="flex items-center gap-2 end">
        <i class="pi pi-home"></i>
        <i class="pi pi-bell"></i>
        <i class="pi pi-moon"></i>
        <i class="pi pi-power-off"></i>
      </div>
    </ng-template>
  </p-menubar>
</div>
```

>  Remove `<app-header></app-header>` from this file. This component is already the header â€“ you shouldn't include itself inside its own template (infinite loop ðŸ’¥).

---

  `home.component.ts`

```ts
import { Component, inject } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css'] //  Fix: use `styleUrls`
})
export class HomeComponent {
  router: Router = inject(Router);

  navigate() {
    this.router.navigate(['/portal/users']);
  }
}
```

---

  `home.component.html`

```html
<div class="container">
  <div>
    <p>Home</p>
  </div>
  <div class="main">
    <p-card (click)="navigate()" class="cursor-pointer">
      Go to User Service <i class="pi pi-angle-double-right"></i>
    </p-card>
  </div>
  <div class="content grid">
    <div class="col-6">
      <p-card>Chart or Info Box</p-card>
    </div>
    <div class="col-6">
      <p-card>Another Card</p-card>
    </div>
  </div>
</div>
```

---

 Tips:
-  Add hover effects and pointer cursor in `home.component.css` if not already done:
```css
p-card {
  cursor: pointer;
  transition: transform 0.2s ease-in-out;
}
p-card:hover {
  transform: scale(1.02);
}

To improve your login functionality and handle the response from the `UserService`, you can modify the `onLogin()` method to include proper authentication, error handling, and conditional navigation. Also, make sure you check if the password matches the user data and handle possible errors such as invalid username or password.

Here's an updated version of your code:

### **LoginComponent**:

```typescript
import { Component, inject } from '@angular/core';
import { UserService } from '../Services/user.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  standalone: false,
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  username = '';
  password = '';
  showPassword = false;
  errorMessage = '';  // Add error message property

  router: Router = inject(Router);
  userService: UserService = inject(UserService);

  onLogin() {
    console.log(this.username + " " + this.password);

    this.userService.getUserByUsername(this.username).subscribe({
      next: (user) => {
        if (user && user.password === this.password) {
          // If user exists and password matches, navigate to portal
          this.router.navigate(['/portal/home']);
        } else {
          // Invalid credentials, show error message
          this.errorMessage = 'Invalid username or password';
        }
      },
      error: (err) => {
        // Handle errors such as network issues or user not found
        this.errorMessage = 'An error occurred. Please try again later.';
        console.error(err);
      }
    });
  }
}
```

### **login.component.html**:

```html
<div class="wrapper">
  <div class="login-card">
    <div class="logo">
      <img src="assets/images/logo.png" alt="">
    </div>
    <h4 class="title">Sign In</h4>
    <p class="subtitle">Welcome Back <span class="username">John!</span></p>

    <!-- Display error message if any -->
    <div *ngIf="errorMessage" class="error-message">
      <p>{{ errorMessage }}</p>
    </div>

    <form #loginForm="ngForm" (ngSubmit)="onLogin()">
      <div class="input-box">
        <label for="uname">User Name *</label><br>
        <input type="text" 
               id="uname" 
               name="uname"
               pInputText 
               [(ngModel)]="username" 
               required/>
      </div>
      
      <div class="input-box">
        <label for="password">Password *</label>
        <p-password name="password" 
                    [(ngModel)]="password" 
                    [toggleMask]="true"
                    id="password"></p-password>
      </div>

      <button pButton label="LOGIN" type="submit" class="login-btn"></button>
    </form>
  </div>
</div>
```

### **Explanation**:

1. **Error Handling**: Added a property `errorMessage` in the component to display any error message if the username or password is incorrect, or if an error occurs during the API call.
   
2. **Login Validation**: After fetching the user data, we check if the username exists and if the password matches. If the credentials are correct, the user is navigated to the `portal/home` route.

3. **Displaying Error**: If the username or password is invalid, an error message is shown above the login form.

4. **Form Submission**: The form is submitted when the user clicks the login button, and the `onLogin()` method handles the authentication.

### Styling the Error Message:
You can also add styles for the error message to make it stand out:

```css
/* Add to your login.component.css */
.error-message {
  color: red;
  font-size: 14px;
  margin-bottom: 15px;
  text-align: center;
}
```
<div class="container">
    <div class="user-container">
        <div class="grid">
            <h1 class="heading">User Service</h1>
            <p-button class="p-button-add" (click)="showDialog()">
                <i class="pi pi-plus add"></i>
            </p-button>
        </div>

        <div class="card">
            <p-table [value]="users" [tableStyle]="{'min-width': '60rem'}">
                <ng-template pTemplate="header">
                    <tr>
                        <th pSortableColumn="name" style="width:14%">
                            Name <p-sortIcon field="name" />
                        </th>
                        <th pSortableColumn="fname" style="width:14%">
                            First Name <p-sortIcon field="fname" />
                        </th>
                        <th pSortableColumn="lname" style="width:14%">
                            LastName <p-sortIcon field="lname" />
                        </th>
                        <th pSortableColumn="email" style="width:18%">
                            Email ID <p-sortIcon field="email" />
                        </th>
                        <th pSortableColumn="status" style="width:12%">
                            Status <p-sortIcon field="status" />
                        </th>
                        <th pSortableColumn="admin" style="width:12%">
                            Is Admin <p-sortIcon field="admin" />
                        </th>
                        <th pSortableColumn="datetime" style="width:25%">
                            Created Date Time <p-sortIcon field="datetime" />
                        </th>
                        <th style="width:5%"></th>
                    </tr>
                </ng-template>
                <ng-template pTemplate="body" let-user>
                    <tr>
                        <td>{{ user.username }}</td>
                        <td>{{ user.fname }}</td>
                        <td>{{ user.lname }}</td>
                        <td>{{ user.email }}</td>
                        <td>
                            <p-tag [value]="user.status" [severity]="getSeverity(user.status)" />
                        </td>
                        <td>{{ user.isAdmin }}</td>
                        <td>{{ user.datetime | date:"MM/dd/yyyy hh:mm a" }}</td>
                        <td>
                            <i class="fa-regular fa-pen-to-square edit-icon" (click)="editUser(user)"></i>
                            <i class="fa-regular fa-trash-can delete-icon" (click)="confirmDelete(user)"></i>
                        </td>
                    </tr>
                </ng-template>
            </p-table>
        </div>
    </div>
</div>

<p-dialog header="User Details" [(visible)]="showDialogs" [modal]="true" [style]="{ width: '25rem' }">
    <form #userForm="ngForm" (ngSubmit)="saveUser(userForm)">
        <div class="form-grid">
            <div class="input-box">
                <label>User Name</label>
                <input pInputText name="username" [(ngModel)]="user.username" required />
            </div>
            <div class="input-box">
                <label>First Name</label>
                <input pInputText name="fname" [(ngModel)]="user.fname" required />
            </div>
            <div class="input-box">
                <label>Last Name</label>
                <input pInputText name="lname" [(ngModel)]="user.lname" required />
            </div>
            <div class="input-box">
                <label>Gender</label>
                <p-selectbutton [options]="genders" [(ngModel)]="user.gender" name="gender" optionLabel="label" optionValue="gender" />
            </div>
            <div class="input-box">
                <label>DOB</label>
                <p-datepicker [(ngModel)]="user.dob" [iconDisplay]="'input'" [showIcon]="true" name="dob" inputId="templatedisplay">
                    <ng-template #inputicon let-clickCallBack="clickCallBack">
                        <i class="fa-solid fa-calendar-days" (click)="clickCallBack($event)"></i>
                    </ng-template>
                </p-datepicker>
            </div>
            <div class="input-box">
                <label>Email ID</label>
                <input pInputText name="email" [(ngModel)]="user.email" type="email" required />
            </div>
            <div class="input-box">
                <label>Address Field 1</label>
                <textarea class="no-resize" pInputTextarea rows="4" [(ngModel)]="user.address1" name="address1"></textarea>
            </div>
            <div class="input-box">
                <label>Address Field 2</label>
                <textarea class="no-resize" pInputTextarea rows="4" [(ngModel)]="user.address2" name="address2"></textarea>
            </div>
            <div class="input-box">
                <label>Country</label>
                <p-select [options]="countries" [(ngModel)]="user.country" (change)="onCountryChange($event)" name="country" />
            </div>
            <div class="input-box">
                <label>State</label>
                <p-select [options]="states" [(ngModel)]="user.state" name="state" />
            </div>
            <div class="input-box">
                <label>Zipcode</label>
                <input pInputText name="zipcode" [(ngModel)]="user.zipcode" />
            </div>
            <div class="input-box">
                <label>Time Zone</label>
                <p-select [options]="timezones" [(ngModel)]="user.timezone" name="timezone" />
            </div>
            <div class="input-box">
                <label>Locale</label>
                <p-select [options]="locales" [(ngModel)]="user.locale" name="locale" />
            </div>
            <div class="input-box">
                <label>Upload User Image</label>
                <p-button class="p-button-upload" label="Upload" (change)="onImageUpload($event)" severity="secondary" />
            </div>
            <div class="input-box">
                <label>Is Admin</label>
                <p-checkbox [(ngModel)]="user.isAdmin" [binary]="true" name="isAdmin"></p-checkbox>
            </div>
        </div>
    </form>
    <ng-template #footer>
        <p-button label="Cancel" class="p-button-secondary-ss" (click)="showDialogs = false" />
        <p-button label="Save" type="submit" class="p-button-primary" (click)="saveUser(userForm)" />
    </ng-template>
</p-dialog>

import { Component, OnInit, inject } from '@angular/core';
import { NgForm } from '@angular/forms';
import { UserService } from '../../Services/user.service';
import { User } from '../../Models/Users';

@Component({
  selector: 'app-users',
  standalone: false,
  templateUrl: './users.component.html',
  styleUrl: './users.component.css'
})
export class UsersComponent implements OnInit {
  showDialogs: boolean = false;
  user: any = {};
  users: User[] = [];
  states: string[] = [];

  userService: UserService = inject(UserService);

  locales: string[] = ['en-US', 'en-GB', 'fr-FR', 'de-DE', 'es-ES', 'zh-CN'];

  genders: any[] = [
    { label: "Male", gender: 'male' },
    { label: "Female", gender: 'female' },
    { label: "Others", gender: 'others' }
  ];

  timezones: string[] = [
    'UTC-05:00', 'UTC-04:00', 'UTC-03:00', 'UTC-02:00', 'UTC-01:00',
    'UTC+00:00', 'UTC+01:00', 'UTC+02:00', 'UTC+03:00', 'UTC+04:00', 'UTC+05:00',
    'UTC+06:00'
  ];

  countries = [
    { label: 'India', value: 'India' },
    { label: 'USA', value: 'USA' }
  ];

  ngOnInit(): void {
    this.fetchUsers();
  }

  fetchUsers(): void {
    this.userService.getUsers().subscribe((data: any[]) => {
      this.users = data;
    });
  }

  onCountryChange(event: any) {
    const selectedCountry = event.value || event.target?.value;

    if (selectedCountry === "India") {
      this.states = ['Karnataka', 'Andhra Pradesh', 'Tamil Nadu', 'Delhi', 'Chennai'];
    } else if (selectedCountry === "USA") {
      this.states = ['California', 'Texas', 'New York', 'Florida'];
    } else {
      this.states = [];
    }
  }

  showDialog(): void {
    this.user = {};
    this.states = [];
    this.showDialogs = true;
  }

  editUser(selectedUser: any): void {
    this.user = { ...selectedUser };
    this.onCountryChange({ value: selectedUser.country });
    this.showDialogs = true;
  }

  confirmDelete(user: any): void {
    const confirmed = window.confirm('Are you sure you want to delete the user?');
    if (confirmed) {
      this.deleteUser(user.username);
    }
  }

  deleteUser(username: string): void {
    this.userService.deleteUser(username).subscribe(() => {
      this.users = this.users.filter(user => user.username !== username);
    });
  }

  saveUser(form: NgForm): void {
    this.user.datetime = new Date();

    if (this.user.username && this.users.some(u => u.username === this.user.username)) {
      // Edit case
      this.userService.updateUser(this.user.username, this.user).subscribe((updatedUser: any) => {
        const index = this.users.findIndex(u => u.username === updatedUser.username);
        if (index !== -1) {
          this.users[index] = updatedUser;
        }
        this.closeDialog(form);
      });
    } else {
      // Add new
      this.userService.addUser(this.user).subscribe((newUser: any) => {
        this.users.push(newUser);
        this.closeDialog(form);
      });
    }
  }

  closeDialog(form: NgForm): void {
    this.showDialogs = false;
    form.resetForm();
  }

  onImageUpload(event: any): void {
    const file = event.target.files[0];
    if (file) {
      if (file.size > 2 * 1024 * 1024) {
        alert('Image size should be less than 2MB');
        return;
      }

      const reader = new FileReader();
      reader.onload = () => {
        this.user.image = reader.result as string;
      };
      reader.readAsDataURL(file);
    }
  }

  getSeverity(status: string): string {
    switch (status) {
      case "Active":
        return 'success';
      case "Disabled":
        return 'secondary';
      default:
        return 'secondary';
    }
  }
}
Thank you for the clarification! Since you're not using an `id` field and you rely on `username` as the unique identifier, here's how you can handle updates in `json-server` without needing an `id` field.

### Steps:

1. **Update Request Using `username`**: Youâ€™ll fetch the user by `username`, get the corresponding `id` (generated by `json-server`), and then use that `id` to perform the update.

2. **No `id` in `User` Interface**: Since your `User` interface doesn't include an `id` field, weâ€™ll continue to use `username` to identify the user, but we need to work with `json-server`'s behavior to perform the update.

---

### Updated `user.service.ts`

Here's how to adapt the `updateUser` logic to work with `json-server` using `username`:

```ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { User } from '../Models/Users';
import { switchMap } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class UserService {

  private apiUrl = 'http://localhost:3000/users'; // API endpoint

  constructor(private http: HttpClient) { }

  // Fetch user by username
  getUserByUsername(username: string): Observable<User[]> {
    return this.http.get<User[]>(`${this.apiUrl}?username=${username}`);
  }

  // Update user by username
  updateUserByUsername(username: string, updatedUser: User): Observable<User> {
    return this.getUserByUsername(username).pipe(
      switchMap(users => {
        if (users.length === 0) {
          throw new Error('User not found');
        }
        const userId = users[0].username; // Using 'username' as unique identifier
        return this.http.put<User>(`${this.apiUrl}?username=${userId}`, updatedUser);
      })
    );
  }

  // Add new user
  addUser(user: User): Observable<User> {
    return this.http.post<User>(this.apiUrl, user);
  }

  // Delete user by username
  deleteUser(username: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}?username=${username}`);
  }

  // Get all users
  getUsers(): Observable<User[]> {
    return this.http.get<User[]>(this.apiUrl);
  }
}
```

### Explanation:
- **Fetching by `username`**: The `getUserByUsername` method retrieves users based on `username`. 
- **Updating by `username`**: The `updateUserByUsername` method uses the `username` to find the user, and then it makes a `PUT` request using the `username` directly in the URL.
  
---

### Updated `users.component.ts` (Component Code)

Now, in the component, you can call `updateUserByUsername` to update the user:

```ts
saveUser(userForm: NgForm): void {
  this.user.datetime = new Date();

  if (this.user.username) {
    // Call service to update the user
    this.userService.updateUserByUsername(this.user.username, this.user).subscribe(updatedUser => {
      const index = this.users.findIndex(u => u.username === updatedUser.username);
      if (index !== -1) this.users[index] = updatedUser;
      this.showDialogs = false;
    }, error => {
      console.error('Error updating user:', error);
    });
  } else {
    // Add new user if 'username' is not available
    this.userService.addUser(this.user).subscribe(savedUser => {
      this.users.push(savedUser);
      this.showDialogs = false;
    });
  }
}
```

### Explanation:
- If the `username` exists, the user will be updated using the `updateUserByUsername` method.
- If `username` doesn't exist (for a new user), the user is added using the `addUser` method.

---

### `json-server` Configuration

Ensure that `json-server` is running and properly set up. You should be able to use query parameters like `?username=jane_smith` for filtering and performing operations.

---

### Important Notes:
1. **Using `username` as the identifier**: Since `json-server` is not aware of a unique field like `id` (which it generates for you), it uses the `username` field to filter users when performing `GET`, `PUT`, and `DELETE` requests. 
   
2. **Always handle errors**: It's important to handle cases where the user doesn't exist by checking for the length of the returned array from `json-server`.

Let me know if you need more help!

