Your `ProductsComponent` class looks well-structured! Here are a few suggestions and corrections to ensure everything works smoothly:

1. **Correct the `styleUrls` Property**: The property should be `styleUrls` instead of `styleUrl`.
    ```typescript
    @Component({
      selector: 'app-products',
      standalone: false,
      templateUrl: './products.component.html',
      styleUrls: ['./products.component.css']
    })
    ```

2. **Fix the `onImageUpload` Method**: Correct the way you access the uploaded file.
    ```typescript
    onImageUpload(event: any) {
      const file = event.target.files[0]; // Corrected from event.target.file[0]
      if (file) {
        this.selectedImageFile = file;
        const reader = new FileReader();
        reader.onload = (e) => {
          this.imagePreview = e.target?.result;
        };
        reader.readAsDataURL(file);
      }
    }
    ```

3. **Initialize `newProduct` Correctly**: Ensure `newProduct` is initialized properly.
    ```typescript
    newProduct: { id: string, name: string, description: string, image: string, quantity: number } = {
      id: '',
      name: '',
      description: '',
      image: '',
      quantity: 0
    };
    ```

4. **Ensure All Methods Are Defined**: Make sure all methods like `searchProducts()`, `incrementQuantity()`, `decrementQuantity()`, `deleteProduct()`, `addNewProduct()`, `showAddPopup()`, `closePopup()`, and `onImageUpload()` are correctly implemented.

Here's the updated version of your component with the corrections:

```typescript
import { Component, inject, OnInit } from '@angular/core';
import { Product } from '../../../Models/products';
import { AuthService } from '../../../Services/auth.service';
import { CartService } from '../../../Services/cart.service';
import { ProductService } from '../../../Services/products.service';

@Component({
  selector: 'app-products',
  standalone: false,
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css']
})
export class ProductsComponent implements OnInit {

  authService: AuthService = inject(AuthService);
  cartService: CartService = inject(CartService);
  prodService: ProductService = inject(ProductService);

  searchText: string = '';
  isAdmin: boolean = false;
  products: Product[] = [];
  filteredProducts: Product[] = [];

  showPopup: boolean = false;
  imagePreview: string | ArrayBuffer | null = null;
  newProduct: { id: string, name: string, description: string, image: string, quantity: number } = {
    id: '',
    name: '',
    description: '',
    image: '',
    quantity: 0
  };
  selectedImageFile: File | null = null;

  ngOnInit() {
    this.isAdmin = this.authService.isAdmin();
    this.loadProducts();
  }

  loadProducts() {
    this.prodService.getProducts().subscribe((res: Product[]) => {
      this.products = res;
      this.filteredProducts = [...this.products];
    });
  }

  searchProducts() {
    const search = this.searchText.toLowerCase();
    this.filteredProducts = this.products.filter((p) =>
      p.name.toLowerCase().includes(search)
    );
  }

  private updateProduct(product: Product) {
    this.prodService.updateProduct(product.id, product).subscribe(() => {
      // console.log(product.id + " " + product.quantity);
    });
  }

  incrementQuantity(product: Product) {
    if (!product.quantity) product.quantity = 0;
    product.quantity++;
    this.updateProduct(product);
    this.cartService.addToCart(product);
  }

  decrementQuantity(product: Product) {
    if (product.quantity > 0) {
      product.quantity--;
      this.updateProduct(product);
      this.cartService.removeFromCart(product);
    }
  }

  deleteProduct(id: string) {
    this.prodService.deleteProduct(id).subscribe(() => {
      this.products = this.products.filter((p) => p.id !== id);
      this.filteredProducts = this.filteredProducts.filter((p) => p.id !== id);
      console.log('product deleted');
    });
  }

  addNewProduct(): void {
    if (this.newProduct.image && this.newProduct.description && this.selectedImageFile) {
      const imageURL = URL.createObjectURL(this.selectedImageFile);
      // this.newProduct.image = imageURL;

      const prodToAdd = { ...this.newProduct, quantity: 0 };
      this.prodService.addProduct(prodToAdd).subscribe(() => {
        this.loadProducts();
        this.closePopup();
        this.newProduct = { id: '', name: '', description: '', image: '', quantity: 0 };
        this.imagePreview = null;
      });
    }
  }

  showAddPopup() {
    this.showPopup = true;
    this.imagePreview = null;
    this.selectedImageFile = null;
  }

  closePopup() {
    this.showPopup = false;
  }

  onImageUpload(event: any) {
    const file = event.target.files[0];
    if (file) {
      this.selectedImageFile = file;
      const reader = new FileReader();
      reader.onload = (e) => {
        this.imagePreview = e.target?.result;
      };
      reader.readAsDataURL(file);
    }
  }
}
```

Feel free to ask if you have any more questions or need further assistance!


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Form Modal</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f5;
        }
        .modal {
            display: flex;
            justify-content: center;
            align-items: center;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
        }
        .modal-content {
            background: white;
            padding: 20px;
            border-radius: 10px;
            width: 50%;
        }
        .profile-section {
            text-align: center;
            position: relative;
        }
        .profile-pic {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
        }
        .edit-icon {
            position: absolute;
            right: 40%;
            bottom: 10px;
            background: white;
            border-radius: 50%;
            padding: 5px;
            cursor: pointer;
        }
        .form-group {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .form-group label {
            font-weight: bold;
        }
        .form-group input, .form-group select, .form-group textarea {
            width: 48%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        .gender-group button {
            padding: 8px 15px;
            border: none;
            margin-right: 5px;
            cursor: pointer;
            border-radius: 5px;
        }
        .btn-primary {
            background: navy;
            color: white;
        }
        .btn-secondary {
            background: lightgray;
        }
        .button-group {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 15px;
        }
    </style>
</head>
<body>

    <div class="modal">
        <div class="modal-content">
            <h2>Edit User</h2>
            <div class="profile-section">
                <img src="profile.jpg" class="profile-pic" alt="User Image">
                <i class="fa fa-edit edit-icon"></i>
            </div>
            
            <div class="form-group">
                <label>User Name</label>
                <input type="text" placeholder="Enter Username">
            </div>
            <div class="form-group">
                <input type="text" placeholder="First Name">
                <input type="text" placeholder="Last Name">
            </div>
            <div class="form-group gender-group">
                <button class="btn-primary">Male</button>
                <button class="btn-secondary">Female</button>
                <button class="btn-secondary">Other</button>
            </div>
            <div class="form-group">
                <input type="date" placeholder="DOB">
                <input type="email" placeholder="Email ID">
            </div>
            <div class="form-group">
                <textarea rows="3" placeholder="Address"></textarea>
            </div>
            <div class="form-group">
                <select><option>Country</option></select>
                <select><option>State</option></select>
            </div>
            <div class="form-group">
                <input type="text" placeholder="Zip Code">
                <input type="text" placeholder="Time Zone">
            </div>
            
            <div class="button-group">
                <button class="btn-secondary">Cancel</button>
                <button class="btn-primary">Save</button>
            </div>
        </div>
    </div>
</body>
</html>
