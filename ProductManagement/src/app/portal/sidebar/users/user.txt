import { Component, inject, OnInit } from '@angular/core';
import { UsersService } from '../../../Services/users.service';
import { User } from '../../../Models/User';
import { ConfirmationService, MessageService } from 'primeng/api';

@Component({
  selector: 'app-users',
  standalone: false,
  templateUrl: './users.component.html',
  styleUrl: './users.component.css'
})
export class UsersComponent implements OnInit {
  userService: UsersService = inject(UsersService);
  confirmationService: ConfirmationService = inject(ConfirmationService);
  messageService: MessageService = inject(MessageService);

  users: User[] = [];
  selectedUser: User | null = null;
  displayDialog: boolean = false;
  isEditing: boolean = false;
  curUser = JSON.parse(localStorage.getItem('user'));

  newUser: any = {
    username: '',
    firstName: '',
    lastName: '',
    gender: '',
    dob: '',
    email: '',
    mobile: '',
    address1: '',
    address2: '',
    country: '',
    state: '',
    zipCode: '',
    timezone: '',
    locale: '',
    imageURL: '',
    isAdmin: false,
    password: ''  // Fix for missing value accessor issue
  };

  ngOnInit() {
    this.loadUsers();
  }

  loadUsers() {
    this.userService.getUsers().subscribe({
      next: (users) => {
        this.users = Object.keys(users).map(key => ({ ...users[key], id: key }));
        this.users.forEach(user => user.age = this.calculateAge(user.dob));
      },
      error: (error) => {
        console.error('Error loading users:', error);
        this.messageService.add({ severity: 'error', summary: 'Error', detail: 'Failed to load users' });
      }
    });
  }

  calculateAge(dob: string): number {
    if (!dob) return 0;
    const birthDate = new Date(dob);
    const ageDifMs = Date.now() - birthDate.getTime();
    const ageDate = new Date(ageDifMs);
    return Math.abs(ageDate.getUTCFullYear() - 1970);
  }

  openUserDialog(user: User | null = null) {
    this.displayDialog = true;
    this.isEditing = !!user;
    this.selectedUser = user;

    if (user) {
      // Editing existing user, retain ID
      this.newUser = { ...user };
    } else {
      // Adding new user, reset form
      this.newUser = {
        username: '',
        firstName: '',
        lastName: '',
        gender: '',
        dob: '',
        email: '',
        mobile: '',
        address1: '',
        address2: '',
        country: '',
        state: '',
        zipCode: '',
        timezone: '',
        locale: '',
        imageURL: '',
        isAdmin: false,
        password: ''  // Ensure password field is included
      };
    }
  }

  saveUser() {
    console.log("Saving user:", this.newUser); // Debugging to check ID presence

    if (this.isEditing && this.newUser.id) {
      // UPDATE existing user
      this.userService.updateUser(this.newUser.id, this.newUser).subscribe(() => {
        this.loadUsers();
        this.displayDialog = false;
        this.messageService.add({ severity: "success", summary: "Updated", detail: "User updated successfully!" });
      });
    } else {
      // ADD new user
      this.userService.addUser(this.newUser).subscribe(() => {
        this.loadUsers();
        this.displayDialog = false;
        this.messageService.add({ severity: "success", summary: "Added", detail: "User added successfully!" });
      });
    }
  }

  confirmDeleteUser(userId: string) {
    this.confirmationService.confirm({
      message: "Are you sure you want to delete this user?",
      accept: () => {
        this.userService.deleteUser(userId).subscribe(() => {
          this.loadUsers();
          this.messageService.add({ severity: "success", summary: "Deleted", detail: "User deleted successfully!" });
        });
      },
    });
  }
}
