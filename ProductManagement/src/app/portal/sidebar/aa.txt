<div class="product-container">
  <h1>Available Products</h1>

  <!-- Search Bar -->
  <div class="search-bar">
    <input type="text" placeholder="Search products..." [(ngModel)]="searchText" (input)="searchProducts()" />
    <button pButton label="Search"></button>
  </div>

  <!-- Products Grid -->
  <div class="product-grid">
    <div *ngFor="let product of filteredProducts" class="product-card">
      <img [src]="product.image" alt="{{ product.name }}" class="product-img" />
      <h3>{{ product.name }}</h3>
      <p>{{ product.description }}</p>

      <!-- Quantity Controls -->
      <div class="quantity-controls">
        <button pButton icon="pi pi-minus" (click)="decrementQuantity(product)" class="p-button-text"></button>
        <span>{{ product.quantity }}</span>
        <button pButton icon="pi pi-plus" (click)="incrementQuantity(product)" class="p-button-text"></button>
      </div>

      <!-- Admin: Delete Button -->
      <div *ngIf="isAdmin">
        <button pButton icon="pi pi-trash" class="p-button-danger" (click)="deleteProduct(product.id)"></button>
      </div>
    </div>

    <!-- Admin Only: Add Product Button (Opens Popup) -->
    <div *ngIf="isAdmin" class="product-card add-product" (click)="showAddProductPopup()">
      <i class="pi pi-plus-circle plus-icon"></i>
      <h3>Add New Product</h3>
    </div>
  </div>
</div>

<!-- Add Product Popup Modal -->
<p-dialog [(visible)]="showPopup" [modal]="true" header="Add Product" [style]="{width: '400px'}">
  <div class="popup-content">
    
    <!-- Image Upload & Preview -->
    <div class="image-upload">
      <label for="imageUpload" class="image-container">
        <img *ngIf="imagePreview" [src]="imagePreview" class="image-preview" />
        <i *ngIf="!imagePreview" class="pi pi-image upload-icon"></i>
      </label>
      <input type="file" id="imageUpload" accept="image/*" (change)="onImageUpload($event)" hidden />
    </div>

    <label>Product Name</label>
    <input type="text" pInputText [(ngModel)]="newProduct.name" placeholder="Enter product name" />

    <label>Description</label>
    <input type="text" pInputText [(ngModel)]="newProduct.description" placeholder="Enter description" />

    <div class="popup-actions">
      <button pButton label="Cancel" (click)="closePopup()"></button>
      <button pButton label="Add" (click)="addNewProduct()" class="p-button-success"></button>
    </div>
  </div>
</p-dialog>

.image-upload {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 15px;
}

.image-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 120px;
  height: 120px;
  border: 2px dashed #ddd;
  border-radius: 8px;
  cursor: pointer;
  overflow: hidden;
}

.image-preview {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.upload-icon {
  font-size: 40px;
  color: #999;
}


export class ProductsComponent {
  showPopup: boolean = false;
  newProduct = { id: '', name: '', description: '', image: '', quantity: 0 };
  imagePreview: string | ArrayBuffer | null = null;
  selectedImageFile: File | null = null;

  showAddProductPopup() {
    this.showPopup = true;
    this.imagePreview = null;
    this.selectedImageFile = null;
  }

  closePopup() {
    this.showPopup = false;
  }

  onImageUpload(event: any) {
    const file = event.target.files[0];
    if (file) {
      this.selectedImageFile = file;

      // Image Preview
      const reader = new FileReader();
      reader.onload = (e) => {
        this.imagePreview = e.target?.result;
      };
      reader.readAsDataURL(file);
    }
  }

  addNewProduct() {
    if (this.newProduct.name && this.newProduct.description && this.selectedImageFile) {
      // Convert File to URL (You can replace this with an API upload call)
      const imageURL = URL.createObjectURL(this.selectedImageFile);
      this.newProduct.image = imageURL;

      const prodToAdd = { ...this.newProduct, quantity: 0 };
      this.prodService.addProduct(prodToAdd).subscribe(() => {
        this.loadProducts();
        this.closePopup();
        this.newProduct = { id: '', name: '', description: '', image: '', quantity: 0 };
        this.imagePreview = null;
      });
    }
  }
}

import { Component, inject } from '@angular/core';
import { Product } from '../../../Models/products';
import { AuthService } from '../../../Services/auth.service';
import { CartService } from '../../../Services/cart.service';
import { ProductService } from '../../../Services/products.service';
import { DialogService } from 'primeng/dynamicdialog';
import { AddProductDialogComponent } from '../add-product-dialog/add-product-dialog.component';
import { DynamicDialogRef } from 'primeng/dynamicdialog';

@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css'],
  providers: [DialogService]
})
export class ProductsComponent {

  authService: AuthService = inject(AuthService);
  cartService: CartService = inject(CartService);
  prodService: ProductService = inject(ProductService);
  dialogService: DialogService = inject(DialogService);

  searchText: string = '';
  isAdmin: boolean = false;
  products: Product[] = [];
  filteredProducts: Product[] = [];
  ref: DynamicDialogRef | undefined;

  ngOnInit() {
    this.isAdmin = this.authService.isAdmin();
    this.loadProducts();
  }

  loadProducts() {
    this.prodService.getProducts().subscribe((res: Product[]) => {
      this.products = res;
      this.filteredProducts = [...this.products];
    });
  }

  searchProducts() {
    const search = this.searchText.toLowerCase();
    this.filteredProducts = this.products.filter((p) => p.name.toLowerCase().includes(search));
  }

  incrementQuantity(product: Product) {
    product.quantity++;
    this.updateProduct(product);
    this.cartService.addToCart(product);
  }

  decrementQuantity(product: Product) {
    if (product.quantity > 0) {
      product.quantity--;
      this.updateProduct(product);
      this.cartService.removeFromCart(product);
    }
  }

  updateProduct(product: Product) {
    this.prodService.updateProduct(product.id, product).subscribe();
  }

  deleteProduct(id: string) {
    this.prodService.deleteProduct(id).subscribe(() => {
      this.products = this.products.filter((p) => p.id !== id);
      this.filteredProducts = this.filteredProducts.filter((p) => p.id !== id);
    });
  }

  openAddProductDialog() {
    this.ref = this.dialogService.open(AddProductDialogComponent, {
      header: 'Add Product',
      width: '40%',
      baseZIndex: 10000
    });

    this.ref.onClose.subscribe((newProduct: Product) => {
      if (newProduct) {
        this.prodService.addProduct(newProduct).subscribe(() => {
          this.loadProducts();
        });
      }
    });
  }
}


You want a user management table and an add/edit user form similar to the ones in your uploaded images. I'll provide a modified Angular component using PrimeNG to match this design.  

Here's your **Users Component (users.component.html & users.component.ts)** updated to reflect this UI:

### **users.component.html**
```html
<div class="card p-4">
    <h2 class="text-xl font-bold">User Data</h2>
    <p-table [value]="users" [paginator]="true" [rows]="10" [responsiveLayout]="'scroll'">
        <ng-template pTemplate="header">
            <tr>
                <th>User Image</th>
                <th>User Name</th>
                <th>Age</th>
                <th>Product Count</th>
                <th>Country</th>
                <th>Actions</th>
            </tr>
        </ng-template>
        <ng-template pTemplate="body" let-user>
            <tr>
                <td>
                    <img [src]="user.imageUrl" alt="User Image" class="rounded-full w-10 h-10" />
                </td>
                <td>{{ user.userName }}</td>
                <td>{{ user.age }}</td>
                <td>{{ user.productCount }}</td>
                <td>{{ user.country }}</td>
                <td>
                    <button pButton icon="pi pi-pencil" class="p-button-text p-mr-2" (click)="editUser(user)"></button>
                    <button pButton icon="pi pi-trash" class="p-button-text p-button-danger" (click)="confirmDelete(user)"></button>
                </td>
            </tr>
        </ng-template>
    </p-table>

    <button pButton label="Add" icon="pi pi-plus" class="p-button-primary mt-3" (click)="addUser()"></button>
</div>

<!-- Add/Edit User Dialog -->
<p-dialog [(visible)]="displayDialog" [modal]="true" [header]="isEdit ? 'Edit User' : 'Add User'" [style]="{width: '50vw'}">
    <div class="p-fluid">
        <div class="p-field">
            <label>User Name</label>
            <input pInputText [(ngModel)]="selectedUser.userName" />
        </div>
        <div class="p-field">
            <label>First Name</label>
            <input pInputText [(ngModel)]="selectedUser.firstName" />
        </div>
        <div class="p-field">
            <label>Last Name</label>
            <input pInputText [(ngModel)]="selectedUser.lastName" />
        </div>
        <div class="p-field">
            <label>Gender</label>
            <p-selectButton [options]="genders" [(ngModel)]="selectedUser.gender"></p-selectButton>
        </div>
        <div class="p-field">
            <label>DOB</label>
            <p-calendar [(ngModel)]="selectedUser.dob" dateFormat="mm/dd/yy"></p-calendar>
        </div>
        <div class="p-field">
            <label>Email</label>
            <input pInputText [(ngModel)]="selectedUser.email" disabled />
        </div>
        <div class="p-field">
            <label>Country</label>
            <p-dropdown [options]="countries" [(ngModel)]="selectedUser.country"></p-dropdown>
        </div>
    </div>
    <div class="p-dialog-footer">
        <button pButton label="Cancel" icon="pi pi-times" class="p-button-text" (click)="closeDialog()"></button>
        <button pButton label="Save" icon="pi pi-check" class="p-button-primary" (click)="saveUser()"></button>
    </div>
</p-dialog>
```

---

### **users.component.ts**
```typescript
import { Component, OnInit } from '@angular/core';
import { ConfirmationService } from 'primeng/api';

@Component({
    selector: 'app-users',
    templateUrl: './users.component.html',
    styleUrls: ['./users.component.css']
})
export class UsersComponent implements OnInit {
    users: any[] = [];
    selectedUser: any = {};
    displayDialog: boolean = false;
    isEdit: boolean = false;
    genders = [{ label: 'Male', value: 'Male' }, { label: 'Female', value: 'Female' }, { label: 'Others', value: 'Others' }];
    countries = ['India', 'USA', 'Japan', 'Canada', 'Netherlands'];

    constructor(private confirmationService: ConfirmationService) {}

    ngOnInit() {
        this.loadUsers();
    }

    loadUsers() {
        this.users = [
            { imageUrl: 'https://via.placeholder.com/40', userName: 'Sam', age: 20, productCount: 20, country: 'Japan' },
            { imageUrl: 'https://via.placeholder.com/40', userName: 'Ravi', age: 24, productCount: 10, country: 'India' }
        ];
    }

    addUser() {
        this.selectedUser = { imageUrl: 'https://via.placeholder.com/40' };
        this.isEdit = false;
        this.displayDialog = true;
    }

    editUser(user: any) {
        this.selectedUser = { ...user };
        this.isEdit = true;
        this.displayDialog = true;
    }

    saveUser() {
        if (this.isEdit) {
            this.users = this.users.map(user => (user.userName === this.selectedUser.userName ? this.selectedUser : user));
        } else {
            this.users.push({ ...this.selectedUser });
        }
        this.displayDialog = false;
    }

    confirmDelete(user: any) {
        this.confirmationService.confirm({
            message: 'Are you sure you want to delete this user?',
            accept: () => {
                this.users = this.users.filter(u => u.userName !== user.userName);
            }
        });
    }

    closeDialog() {
        this.displayDialog = false;
    }
}
```

---

### **users.component.css**
```css
.p-table {
    border-radius: 8px;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
}

.p-field {
    margin-bottom: 1rem;
}
```

---

### **Changes & Features Added:**
 **User Data Table**: Displays users with images, age, product count, and country.  
 **Edit/Delete Icons**: Allows modifying user details or deleting users.  
 **Add User Button**: Opens a form to add a new user.  
 **Popup Form for Add/Edit**: Similar to your design, with fields like user name, gender, email, country, and DOB.  
 **PrimeNG UI Components Used**: `p-table`, `p-dialog`, `p-button`, `p-dropdown`, `p-calendar`, `p-selectButton`.  

---

Does this match your expected UI and functionality? Let me know if you need modifications! 🚀
---

 Features:**
✔ **Fetch Users** from Firebase using `GET` request.  
✔ **Add Users** using a **PrimeNG Dialog Popup** (`p-dialog`) via `POST`.  
✔ **Edit Users** using the same **PrimeNG Dialog** via `PUT`.  
✔ **Delete Users** with a **PrimeNG Confirmation Dialog (`p-confirmdialog`)** via `DELETE`.  
✔ **Table (`p-table`) for displaying users with PrimeNG styling**.  
✔ **Avatar (`p-avatar`) for user images**.  

---

  User Service (`user.service.ts`)**
Handles all user-related operations with Firebase.

```typescript
import { Injectable, inject } from "@angular/core";
import { HttpClient } from "@angular/common/http";
import { Observable, map } from "rxjs";

@Injectable({
  providedIn: "root",
})
export class UserService {
  private baseUrlUsers = "https://assignment-a22f7-default-rtdb.firebaseio.com/users";
  http: HttpClient = inject(HttpClient);

  // Fetch all users
  getUsers(): Observable<any[]> {
    return this.http.get<{ [key: string]: any }>(`${this.baseUrlUsers}.json`).pipe(
      map((userData) => {
        if (!userData) return [];
        return Object.keys(userData).map((key) => ({
          ...userData[key],
          id: key, // Assign Firebase unique key
        }));
      })
    );
  }

  // Add a new user
  addUser(user: any): Observable<any> {
    return this.http.post<{ name: string }>(`${this.baseUrlUsers}.json`, user);
  }

  // Update existing user
  updateUser(userId: string, user: any): Observable<any> {
    return this.http.put(`${this.baseUrlUsers}/${userId}.json`, user);
  }

  // Delete a user
  deleteUser(userId: string): Observable<any> {
    return this.http.delete(`${this.baseUrlUsers}/${userId}.json`);
  }
}
```

---

 2️⃣ User Component (`users.component.ts`)**
Handles UI interactions and service calls.

```typescript
import { Component, inject, OnInit } from "@angular/core";
import { UserService } from "../../../Services/user.service";
import { ConfirmationService, MessageService } from "primeng/api";

@Component({
  selector: "app-users",
  standalone: false,
  templateUrl: "./users.component.html",
  styleUrl: "./users.component.css",
})
export class UsersComponent implements OnInit {
  userService: UserService = inject(UserService);
  confirmationService: ConfirmationService = inject(ConfirmationService);
  messageService: MessageService = inject(MessageService);

  users: any[] = [];
  showUserDialog: boolean = false;
  isEditing: boolean = false;
  selectedUser: any = null;

  newUser = {
    userName: "",
    firstName: "",
    lastName: "",
    gender: "",
    dob: "",
    email: "",
    mobile: "",
    address1: "",
    address2: "",
    country: "",
    state: "",
    zipCode: "",
    timezone: "",
    locale: "",
    userImage: "",
    isAdmin: false,
  };

  ngOnInit() {
    this.loadUsers();
  }

  loadUsers() {
    this.userService.getUsers().subscribe((data) => {
      this.users = data;
    });
  }

  openUserDialog(user: any = null) {
    this.showUserDialog = true;
    this.isEditing = !!user;
    this.selectedUser = user;
    this.newUser = user
      ? { ...user }
      : {
          userName: "",
          firstName: "",
          lastName: "",
          gender: "",
          dob: "",
          email: "",
          mobile: "",
          address1: "",
          address2: "",
          country: "",
          state: "",
          zipCode: "",
          timezone: "",
          locale: "",
          userImage: "",
          isAdmin: false,
        };
  }

  saveUser() {
    if (this.isEditing) {
      this.userService.updateUser(this.selectedUser.id, this.newUser).subscribe(() => {
        this.loadUsers();
        this.showUserDialog = false;
        this.messageService.add({ severity: "success", summary: "Updated", detail: "User updated successfully!" });
      });
    } else {
      this.userService.addUser(this.newUser).subscribe(() => {
        this.loadUsers();
        this.showUserDialog = false;
        this.messageService.add({ severity: "success", summary: "Added", detail: "User added successfully!" });
      });
    }
  }

  confirmDeleteUser(userId: string) {
    this.confirmationService.confirm({
      message: "Are you sure you want to delete this user?",
      accept: () => {
        this.userService.deleteUser(userId).subscribe(() => {
          this.loadUsers();
          this.messageService.add({ severity: "success", summary: "Deleted", detail: "User deleted successfully!" });
        });
      },
    });
  }
}
```

---

 3️⃣ User Component HTML (`users.component.html`)**
Uses PrimeNG components:  
- **Table (`p-table`)**  
- **Dialog (`p-dialog`)**  
- **Buttons (`p-button`)**  
- **Confirmation Dialog (`p-confirmdialog`)**  

```html
<div class="user-container">
  <h2>User Management</h2>
  <p-button label="Add User" icon="pi pi-user-plus" (click)="openUserDialog()" />

  <!-- Users Table -->
  <p-table [value]="users" responsiveLayout="scroll">
    <ng-template pTemplate="header">
      <tr>
        <th>User Image</th>
        <th>Username</th>
        <th>Age</th>
        <th>Orders Count</th>
        <th>Country</th>
        <th>Actions</th>
      </tr>
    </ng-template>

    <ng-template pTemplate="body" let-user>
      <tr>
        <td>
          <p-avatar [image]="user.userImage || 'assets/default-avatar.png'" shape="circle"></p-avatar>
        </td>
        <td>{{ user.userName }}</td>
        <td>{{ calculateAge(user.dob) }}</td>
        <td>{{ user.orderedProductsCount || 0 }}</td>
        <td>{{ user.country }}</td>
        <td>
          <p-button icon="pi pi-pencil" (click)="openUserDialog(user)" />
          <p-button icon="pi pi-trash" severity="danger" (click)="confirmDeleteUser(user.id)" />
        </td>
      </tr>
    </ng-template>
  </p-table>
</div>

<!-- User Form Dialog -->
<p-dialog header="{{ isEditing ? 'Edit User' : 'Add User' }}" [(visible)]="showUserDialog" [modal]="true">
  <div class="form-group">
    <label>Username</label>
    <input type="text" pInputText [(ngModel)]="newUser.userName" [disabled]="isEditing" required />

    <label>First Name</label>
    <input type="text" pInputText [(ngModel)]="newUser.firstName" required />

    <label>Email</label>
    <input type="email" pInputText [(ngModel)]="newUser.email" required />

    <label>Mobile</label>
    <input type="text" pInputText [(ngModel)]="newUser.mobile" required />

    <label>Country</label>
    <p-dropdown [(ngModel)]="newUser.country" [options]="['India', 'USA']" placeholder="Select Country"></p-dropdown>

    <label>Upload Image</label>
    <input type="file" (change)="onFileChange($event)" />
  </div>

  <p-footer>
    <p-button label="Cancel" icon="pi pi-times" (click)="showUserDialog = false" class="p-button-text" />
    <p-button label="Save" icon="pi pi-check" (click)="saveUser()" />
  </p-footer>
</p-dialog>

<!-- Confirmation Dialog -->
<p-confirmdialog></p-confirmdialog>
<p-toast></p-toast>
```

---

## ** Features Implemented**
✔ **Fetch Users** from Firebase (`GET`)  
✔ **Add Users** (`POST`)  
✔ **Edit Users** (`PUT`)  
✔ **Delete Users** (`DELETE`)  
✔ **PrimeNG Table (`p-table`)**  
✔ **PrimeNG Dialog (`p-dialog`)**  
✔ **PrimeNG Confirmation (`p-confirmdialog`)**  
✔ **PrimeNG Avatar (`p-avatar`)**  

🔥 **Fully optimized & interactive! Let me know if you need modifications!** 🚀